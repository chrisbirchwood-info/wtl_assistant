                  </select>

                  {editLessonIds.length > 0 && (
                    <div className="space-y-2 max-h-32 overflow-y-auto border border-gray-200 rounded-md p-3">
                      {editLessonIds.map((lessonId, index) => {
                        const lesson = lessons.find(l => l.id === lessonId || l.wtl_lesson_id === lessonId)
                        if (!lesson) return null
                        return (
                          <div key={lessonId} className="flex items-center space-x-3 bg-gray-50 p-2 rounded">
                            <span className="flex-1 text-sm text-gray-700">{lesson.title}</span>
                            <select
                              value={editConnectionTypes[index] || 'related'}
                              onChange={(e) => handleConnectionTypeChange(lessonId, e.target.value as 'primary' | 'related' | 'loose')}
                              className="text-xs border border-gray-300 rounded px-2 py-1"
                            >
                              <option value="primary">GÅ‚Ã³wne</option>
                              <option value="related">PowiÄ…zane</option>
                              <option value="loose">LuÅºne</option>
                            </select>
                            <button
                              type="button"
                              onClick={() => handleLessonSelection(lessonId, false)}
                              className="text-red-600 hover:text-red-800 text-sm font-medium"
                            >
                              Ã—
                            </button>
                          </div>
                        )
                      })}
                    </div>
                  )}
                </div>
              </div>

              <div className="flex space-x-3">
                <button onClick={() => handleUpdate(thread.id)} disabled={isSubmitting} className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400">
                  {isSubmitting ? 'ZapisujÄ™...' : 'Zapisz'}
                </button>
                <button onClick={cancelEditing} className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400">Anuluj</button>
              </div>
            </div>
          ) : (
            <div>
              <div className="flex items-start justify-between mb-3">
                <h4 className="text-lg font-semibold text-gray-900">{thread.title}</h4>
                <div className="flex space-x-2">
                  <button onClick={() => startEditing(thread)} className="text-blue-600 hover:text-blue-800 text-sm font-medium">Edytuj</button>
                  <button onClick={() => handleDelete(thread.id)} className="text-red-600 hover:text-red-800 text-sm font-medium">UsuÅ„</button>
                </div>
              </div>

              <p className="text-gray-700 mb-4 whitespace-pre-wrap">{thread.content}</p>

              {getConnections(thread).length > 0 ? (
                <div className="border-t pt-3">
                  <h5 className="text-sm font-medium text-gray-700 mb-2">PowiÄ…zane lekcje:</h5>
                  <div className="flex flex-wrap gap-2">
                    {getConnections(thread).map((connection: ThreadLessonConnection) => (
                      <span key={connection.id} className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getConnectionTypeColor(connection.connection_type)}`}>
                        {getConnectionTypeLabel(connection.connection_type)}: {(lessons.find(l => l.id === connection.lesson_id || l.wtl_lesson_id === connection.lesson_id)?.title) || connection.lesson_id}
                      </span>
                    ))}
                  </div>
                </div>
              ) : (
                <div className="border-t pt-3">
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">ðŸ§µ LuÅºny wÄ…tek</span>
                </div>
              )}

              <div className="text-xs text-gray-500 mt-3">
                Utworzono: {new Date(thread.created_at).toLocaleDateString('pl-PL')}
                {thread.updated_at !== thread.created_at && ` â€¢ Zaktualizowano: ${new Date(thread.updated_at).toLocaleDateString('pl-PL')}`}
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  )
}
